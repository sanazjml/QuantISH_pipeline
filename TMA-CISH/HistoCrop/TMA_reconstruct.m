%This function is used to reconstruct the TMA image from the small output 
%images generated by mrxs_convert.py.
%
%INPUT:
%       -img_names: paths of each sub-image
%       -mat_coord: coordinates for the matrix
%
%OUTPUT:
%       -Image: recontructed image.
%
% Ariotta Valeria  & Pohjonen Joona
% June 2019

function [Img] = TMA_reconstruct(img_names, mat_coord)

if nargin < 1 | isempty(img_names)
    warning('No folder specified!');
    return;
end

%Remove images that aren't within ROI dimensions
for i=1:length(img_names)
    ind=find(img_names{i}=='_');
    x_coord = str2double(regexp(img_names{i}(ind(end)+1:end),...
        '[0-9]\w+','match'));
    y_coord = str2double(regexp(img_names{i}(ind(end-1)+1:ind(end)-1),...
        '[0-9]\w+','match'));
    
    if x_coord < mat_coord(1)
        img_names{i} = 'empty';
    end
    
    if x_coord > mat_coord(2)
        img_names{i} = 'empty';
    end
    
    if y_coord < mat_coord(3)
        img_names{i} = 'empty';
    end
    
    if y_coord > mat_coord(4)
        img_names{i} = 'empty';
    end
end

img_names = img_names(cellfun(@(s)isempty(regexp(s,'empty')),img_names));

%Find out row and col lengths
ind=find(img_names{1}=='_');
name_y = img_names{1}(ind(end-1):ind(end));
name_x = img_names{1}(ind(end):end);
x_length = length(img_names(~cellfun('isempty', strfind(img_names, name_y))));
y_length = length(img_names(~cellfun('isempty', strfind(img_names, name_x))));

%Preallocate Img
small_img = imread(img_names{1});
small_img_dims = size(small_img);
image_dims = [y_length * small_img_dims(1), x_length * small_img_dims(2)];
Img = zeros(image_dims(1), image_dims(2),3, 'uint8');

% Initialize progress bar:
upd = textprogressbar(y_length, 'barlength',30,'updatestep',1,...
    'startmsg','Reconstructing image   ');

image_count = 1;
for i=1:y_length
    %Find out row image names
    ind=find(img_names{image_count}=='_');
    row_name = img_names{image_count}(ind(end-1):ind(end));
    row_images = img_names(~cellfun('isempty', strfind(img_names, row_name)));
    
    %Preallocate Img_row
    Img_row = zeros(small_img_dims(1),small_img_dims(2)*length(row_images),3);
    
    %Load row image
    width = 1;
    for j=1:length(row_images)
        small_img =imread(row_images{j}, 'BackgroundColor', [1 1 1]);
        Img_row(1:small_img_dims(1),...
            width:(width+small_img_dims(2)-1),:) = small_img;
        width = width + small_img_dims(2);
    end
   
    Img(small_img_dims(1)*(i-1)+1:...
        (small_img_dims(2)*i),:,:) = Img_row;
    
    %Jump past images in row
    image_count = image_count + length(row_images);
    
    %Update progress bar:
    upd(i);
end
end
